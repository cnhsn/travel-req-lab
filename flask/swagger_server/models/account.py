# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_name: str=None, account_number: str=None, account_type: str=None, account_status: str=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param account_name: The account_name of this Account.  # noqa: E501
        :type account_name: str
        :param account_number: The account_number of this Account.  # noqa: E501
        :type account_number: str
        :param account_type: The account_type of this Account.  # noqa: E501
        :type account_type: str
        :param account_status: The account_status of this Account.  # noqa: E501
        :type account_status: str
        """
        self.swagger_types = {
            'account_name': str,
            'account_number': str,
            'account_type': str,
            'account_status': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'account_status': 'accountStatus'
        }
        self._account_name = account_name
        self._account_number = account_number
        self._account_type = account_type
        self._account_status = account_status

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self) -> str:
        """Gets the account_name of this Account.


        :return: The account_name of this Account.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name: str):
        """Sets the account_name of this Account.


        :param account_name: The account_name of this Account.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self) -> str:
        """Gets the account_number of this Account.


        :return: The account_number of this Account.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number: str):
        """Sets the account_number of this Account.


        :param account_number: The account_number of this Account.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def account_type(self) -> str:
        """Gets the account_type of this Account.


        :return: The account_type of this Account.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this Account.


        :param account_type: The account_type of this Account.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def account_status(self) -> str:
        """Gets the account_status of this Account.


        :return: The account_status of this Account.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status: str):
        """Sets the account_status of this Account.


        :param account_status: The account_status of this Account.
        :type account_status: str
        """

        self._account_status = account_status
